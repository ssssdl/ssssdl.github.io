<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[修改编程背景]]></title>
    <url>%2F2018%2F05%2F31%2F%E4%BF%AE%E6%94%B9IDE%E8%83%8C%E6%99%AF%2F</url>
    <content type="text"><![CDATA[修改编程背景很多编程环境都支持，一搜一大片，简单总结一下我常用的VS，AS，myEclipse，VScode 0X00 VScode 搜索安装插件background安装好之后，文件&gt;首选项&gt;设置，搜索&gt;background,在”background.style”上面添加如下代码,第一行设置关闭默认，第二行设置图片路径1234&quot;background.useDefault&quot;: false,&quot;background.customImages&quot;: [ &quot;file:///E:/Pictures/ooYBAFMdVXWIGiLgABHveagp06AAABZVQC-G_QAEe-R438.jpg&quot;], 可能要重启，我忘了。。。就这样吧 0X01 VS 工具&gt;扩展和更新&gt;联机搜索background下载,就一个是一个黄发妹子的图标，算了，截个图吧就是这个安好了之后工具&gt;选项&gt;选择这个caudiaIDE插件一顿设置不用重启就行了 0X02 AS 这个比较简单两个插件+一个网站1.网站：color-themes下载好主题导入设置就可以了2.插件：Material Theme UI 这个插件在setting&gt; Editor&gt; Colors &amp; Fonts设置Sexy Editor 这个在setting&gt; other Setting&gt; Sexy Editor设置比较简单，没啥说的 0X03 myEclipse 这是一个CSDN上大佬原创的，博客原文,他写的是eclipse的修改背景图片，但myEclipse也可以用，甚至比eclpise简单，因为eclipse很多插件要自己弄友情提示：配置这个的时候要注意图片路径 最后附上myEclipse破解：在获取破解码网站输入myeclipse 2017获取破解码，myEclipse中help-&gt;subscription information id填myeclipse 2017，下面写上注册码，后面的邮箱可以写自己的]]></content>
      <categories>
        <category>基本操作</category>
      </categories>
      <tags>
        <tag>代码技巧</tag>
        <tag>环境优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android全屏]]></title>
    <url>%2F2018%2F05%2F30%2FAndroid%E5%85%A8%E5%B1%8F%2F</url>
    <content type="text"><![CDATA[android全屏实现0X00实现 代码如下:style.xml文件中写一个style123&lt;style name=&quot;quanping&quot; parent=&quot;Theme.AppCompat.DayNight.NoActionBar&quot;&gt; &lt;item name=&quot;android:windowFullscreen&quot;&gt;true&lt;/item&gt;&lt;/style&gt; 解释：以上代码parent=&quot;Theme.AppCompat.DayNight.NoActionBar&quot;实现去除标题栏，&lt;item name=&quot;android:windowFullscreen&quot;&gt;true&lt;/item&gt;实现全屏 AndroidMainifest.xml文件中应用该style，在application（对全部活动），或者activity（对单个活动）标签里面添加1android:theme=&quot;@style/quanping&quot; 0X01总结 感觉不是什么特别合理的解决方案，有时间可以学一下沉浸状态栏]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>xml</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android数组+循环批量管理控件]]></title>
    <url>%2F2018%2F05%2F30%2FAndroid%E6%95%B0%E7%BB%84-%E5%BE%AA%E7%8E%AF%E6%89%B9%E9%87%8F%E7%AE%A1%E7%90%86%E6%8E%A7%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[Android管理多按钮，资源文件实现0X00 问题来源 最近做了一个Android计算器交Android通识课作业， 感觉按钮控件很多，一个一个写监听太蠢了 0X01 解决方案 看了很多资料，总结加原创 1.建立id数组 string.xml文件建立数组，把所有需要统一管理的控件id写到这里面，比如我是计算器代码如下：12345678... ... &lt;string-array name=&quot;actions_button&quot;&gt; &lt;item&gt;@+id/bT0&lt;/item&gt; &lt;item&gt;@+id/bT1&lt;/item&gt; .... &lt;item&gt;@+id/bT15&lt;/item&gt; &lt;/string-array&gt;... ... 我还实现了计算器语音播报功能其中每一个按钮对应的语音文件也可以这样管理具体元素代码&lt;item&gt;@raw/num7&lt;/item&gt; 2.获取按钮id 先建立一个Button的数组1Button[] btsz = new Button[16];//创建15个按钮的数组 在onCreate方法里面12345678910... ...TypedArray btidar = getResources().obtainTypedArray(R.array.actions_button);//通过调用string.xml文件中的数组批量管理按钮idint len = btidar.length();//一共16个按钮int[] btid = new int[len];final int[] yinid = new int[len];for (int i = 0; i &lt; len; i++)&#123; btid[i] = btidar.getResourceId(i,0);//获得按钮的id放到btid数组里面，这里可以写成两行 btsz[i] = (Button)findViewById(btid[i]);//绑定id到按钮&#125;... ... 3.批量监听实现12345678910111213141516... ... for(int i = 0;i &lt; 16;i++)&#123;//这里原创 哈哈哈哈 if(i == 14) //等号单独处理 continue; btsz[i].setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; //这是在另一个类方法里面，不能使用循环变量i，需要辨别当前按钮的话可以使用以下代码 ...... Button btt = (Button)findViewById(view.getId());//获取当前按钮 String str1 = btt.getText().toString();//获取按钮上的文本 ...... &#125; &#125;); &#125;... ... 0X02总结 这个解决方法不止一种，还可以重写onClick方法，利用view变量获取当前按钮id，然后一个swich就解决了]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Java</tag>
        <tag>代码技巧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android欢迎界面实现]]></title>
    <url>%2F2018%2F05%2F30%2FAndroid%E6%AC%A2%E8%BF%8E%E7%95%8C%E9%9D%A2%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[Android 欢迎界面实现0X00 原理解析 实现方法很多，但基本原理都差不多，就是在你的功能界面之前调用一个欢迎的活动，欢迎活动尽量简单，太复杂好像会引起应用启动时短暂的白屏，然后再欢迎Activity 延时一段时间，跳转到功能界面就可以了 0X01 具体实现优先启动欢迎界面 右键工程建立一个Activity,一阵设计界面后，设置这个活动第一个启动：在AndroidMainifest.xml中：主活动中剪切如下代码123456... ...&lt;intent-filter&gt;&lt;!--这四行放在activity标签中代表这个活动是第一个启动--&gt; &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt; &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&lt;/intent-filter&gt;&lt;!--end--&gt;... ... 粘贴到欢迎活动中去，结果如下123456789101112... ...&lt;activity android:name=&quot;.MainActivity&quot; android:screenOrientation=&quot;portrait&quot;&gt; &lt;!--这个是主界面，android:screenOrientation=&quot;portrait&quot;设置只能竖屏--&gt;&lt;/activity&gt;&lt;activity android:name=&quot;.Main2Activity&quot;&gt;&lt;!--欢迎界面--&gt; &lt;intent-filter&gt;&lt;!--这四行放在activity标签中代表这个活动是第一个启动--&gt; &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt; &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt; &lt;/intent-filter&gt;&lt;!--end--&gt;&lt;/activity&gt;... ... 到这里运行程序时就会先调用欢迎界面 延时调用主活动 直接上代码1234567891011121314151617181920212223242526272829import android.content.Intent;import android.os.Handler;import android.os.Message;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;public class Main2Activity extends AppCompatActivity &#123;//欢迎界面 private Handler handler = new Handler() &#123; @Override public void handleMessage(Message msg) &#123; //接收到消息后跳转 goMain(); super.handleMessage(msg); &#125; &#125;; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main2); //延迟两秒发送消息 handler.sendEmptyMessageDelayed(0,2000); &#125; private void goMain() &#123; //设定调动MainActivity Intent intent=new Intent(this,MainActivity.class); startActivity(intent); //将控制权交给MainActivity finish(); //结束 &#125;&#125; 0X02 总结 不然可以建立工程的时候先写欢迎Activity 哈哈哈哈哈]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>xml</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F05%2F16%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>hello</category>
      </categories>
      <tags>
        <tag>hello</tag>
      </tags>
  </entry>
</search>
